#!/bin/sh
set -eu

# This scripts sets the version of the snap that's being based on the
# git tags on the current branch.

# If there's a tag prefixed with the current branch name, that tag is
# used and the prefix is stripped. For example:
# * msentraid-0.1.0 -> 0.1.0
#
# Else, the highest version tag that starts with a number (in contrast
# to a prefix like "msentraid-") is used. For example:
# * 0.1.0 -> 0.1.0
#
# 1. If current commit is tagged, that tag is used as the version as is.
# 2. If current commit is not tagged, the version is:
#    * When on main: <latest tag on current branch>+<commit_sha>
#    * Else: <latest tag on current branch>+<commit_sha>.<last_commit_merged_from_main>
#
# The version is appended with ".dirty" if there are uncommitted changes.

# set_version appends ".dirty" if needed and then sets the version of the snap
# $1: version: the version to set.
set_version() {
    version="${1}"

    version=$(annotate_with_dirty "${version}")
    craftctl set version="${version}"
}

# annotate_with_dirty appends ".dirty" to the version if there are
# uncommitted changes.
# $1: version: the version to annotate.
annotate_with_dirty() {
    version="${1}"

    # check if current tree content is dirty.
    is_dirty=$(git -C "${SNAPCRAFT_PART_SRC}" status --porcelain)
    if [ -n "${is_dirty}" ]; then
        version="${version}.dirty"
    fi

    echo "${version}"
}

# strip_branch_tag_prefix removes any non-numeric prefix ending with a
# dash (e.g. "msentraid-") from the tag name. We use this to remove the
# branch name prefix from the tag name, but we do not just strip the
# current branch name because we also want to support branching of a new
# branch and use the latest tag from that branch (for example when
# branching of the msentraid branch to test a fix, then that branch
# should still use a valid version).
# $1: tag: the tag name to strip the prefix from.
strip_branch_tag_prefix() {
    tag="${1}"

    echo "${tag}" | sed 's/^[^0-9-]*-//'
}

current_branch=$(git -C "${SNAPCRAFT_PART_SRC}" branch --show-current)

# Get the highest version tag which is prefixed with the current branch name.
tag=$(git tag --sort=-v:refname --merged="${current_branch}" | grep "^${current_branch}-" | head -1)

# If there is no tag prefixed with the current branch name, use the most
# recent tag that does not have a non-numerical prefix (that's the case
# when we're building a snap for testing on a branch that's not
# "msentraid" or "google").
if [ -z "${tag}" ]; then
    tag=$(git tag --sort=-v:refname --merged="${current_branch}" | grep -E '^[0-9]+' | head -1)
fi

version="${tag}"
if [ -z "${version}" ]; then
    # No tag found, use "notag" as version.
    version="notag"
fi
version=$(strip_branch_tag_prefix "${version}")

# If the highest version tag is on the current commit, use it as is after
# stripping the prefix.
if [ -n "${tag}" ] && [ "$(git describe --tags --exact-match 2>/dev/null)" = "${tag}" ]; then
    set_version "${version}"
    exit 0
fi

# Current commit is not tagged, append commit(s) sha.
version="${version}+$(git -C "${SNAPCRAFT_PART_SRC}" rev-parse --short=7 HEAD)"

# Main branch will be set as is.
if [ "${current_branch}" = "main" ]; then
    set_version "${version}"
    exit 0
fi

# Get the short version of last commit merged from the main branch.
last_commit_on_main=$(git -C "${SNAPCRAFT_PART_SRC}" merge-base main HEAD)
last_commit_on_main=$(git -C "${SNAPCRAFT_PART_SRC}" rev-parse --short=7 "${last_commit_on_main}")
version="${version}.${last_commit_on_main}"

# Check if the version is a valid semantic version.
if ! semver check "${version}"; then
    echo "Version ${version} is not a valid semantic version."
    exit 1
fi

set_version "${version}"
